// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/batch/v1/message.proto

package batch

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BatchOperationInfo struct {
	// Batch job ID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Batch operation state
	State v1.BatchOperationState `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.api.enums.v1.BatchOperationState" json:"state,omitempty"`
	// Batch operation start time
	StartTime *time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	// Batch operation close time
	CloseTime *time.Time `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3,stdtime" json:"close_time,omitempty"`
}

func (m *BatchOperationInfo) Reset()      { *m = BatchOperationInfo{} }
func (*BatchOperationInfo) ProtoMessage() {}
func (*BatchOperationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b69fde24a23d85f, []int{0}
}
func (m *BatchOperationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOperationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchOperationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchOperationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperationInfo.Merge(m, src)
}
func (m *BatchOperationInfo) XXX_Size() int {
	return m.Size()
}
func (m *BatchOperationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperationInfo proto.InternalMessageInfo

func (m *BatchOperationInfo) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *BatchOperationInfo) GetState() v1.BatchOperationState {
	if m != nil {
		return m.State
	}
	return v1.BATCH_OPERATION_STATE_UNSPECIFIED
}

func (m *BatchOperationInfo) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *BatchOperationInfo) GetCloseTime() *time.Time {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

// BatchOperationTermination sends terminate requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.TerminateWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationTermination struct {
	// Reason of terminate workflows
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Serialized value(s) to provide to the termination event
	Details *v11.Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *BatchOperationTermination) Reset()      { *m = BatchOperationTermination{} }
func (*BatchOperationTermination) ProtoMessage() {}
func (*BatchOperationTermination) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b69fde24a23d85f, []int{1}
}
func (m *BatchOperationTermination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOperationTermination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchOperationTermination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchOperationTermination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperationTermination.Merge(m, src)
}
func (m *BatchOperationTermination) XXX_Size() int {
	return m.Size()
}
func (m *BatchOperationTermination) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperationTermination.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperationTermination proto.InternalMessageInfo

func (m *BatchOperationTermination) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BatchOperationTermination) GetDetails() *v11.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *BatchOperationTermination) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// BatchOperationSignal sends signals to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
type BatchOperationSignal struct {
	// The workflow author-defined name of the signal to send to the workflow
	Signal string `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Serialized value(s) to provide with the signal
	Input *v11.Payloads `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// Headers that are passed with the signal to the processing workflow.
	// These can include things like auth or tracing tokens.
	Header *v11.Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *BatchOperationSignal) Reset()      { *m = BatchOperationSignal{} }
func (*BatchOperationSignal) ProtoMessage() {}
func (*BatchOperationSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b69fde24a23d85f, []int{2}
}
func (m *BatchOperationSignal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOperationSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchOperationSignal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchOperationSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperationSignal.Merge(m, src)
}
func (m *BatchOperationSignal) XXX_Size() int {
	return m.Size()
}
func (m *BatchOperationSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperationSignal.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperationSignal proto.InternalMessageInfo

func (m *BatchOperationSignal) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

func (m *BatchOperationSignal) GetInput() *v11.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *BatchOperationSignal) GetHeader() *v11.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BatchOperationSignal) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// BatchOperationCancellation sends cancel requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.RequestCancelWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationCancellation struct {
	// Reason of cancel workflows
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *BatchOperationCancellation) Reset()      { *m = BatchOperationCancellation{} }
func (*BatchOperationCancellation) ProtoMessage() {}
func (*BatchOperationCancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b69fde24a23d85f, []int{3}
}
func (m *BatchOperationCancellation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOperationCancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchOperationCancellation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchOperationCancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperationCancellation.Merge(m, src)
}
func (m *BatchOperationCancellation) XXX_Size() int {
	return m.Size()
}
func (m *BatchOperationCancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperationCancellation.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperationCancellation proto.InternalMessageInfo

func (m *BatchOperationCancellation) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BatchOperationCancellation) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func init() {
	proto.RegisterType((*BatchOperationInfo)(nil), "temporal.api.batch.v1.BatchOperationInfo")
	proto.RegisterType((*BatchOperationTermination)(nil), "temporal.api.batch.v1.BatchOperationTermination")
	proto.RegisterType((*BatchOperationSignal)(nil), "temporal.api.batch.v1.BatchOperationSignal")
	proto.RegisterType((*BatchOperationCancellation)(nil), "temporal.api.batch.v1.BatchOperationCancellation")
}

func init() {
	proto.RegisterFile("temporal/api/batch/v1/message.proto", fileDescriptor_3b69fde24a23d85f)
}

var fileDescriptor_3b69fde24a23d85f = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0xa1, 0x09, 0xe4, 0x8a, 0x18, 0x2c, 0x82, 0x82, 0x87, 0x6b, 0x1a, 0x18, 0x22,
	0x90, 0xce, 0x4a, 0x90, 0x3a, 0x98, 0x01, 0x1a, 0x16, 0x3a, 0x20, 0x22, 0x13, 0x75, 0x60, 0x89,
	0x2e, 0xf1, 0x5b, 0xf7, 0x2a, 0xfb, 0xce, 0xf2, 0x5d, 0x22, 0x75, 0x63, 0x67, 0xe9, 0xc7, 0x40,
	0xcc, 0x4c, 0x7c, 0x02, 0xc6, 0x8c, 0xdd, 0x20, 0xce, 0x82, 0x58, 0xe8, 0x47, 0x40, 0x3e, 0xc7,
	0xa8, 0x2e, 0x7f, 0xd4, 0xed, 0x7d, 0xef, 0x7e, 0xcf, 0xeb, 0xe7, 0x39, 0xdf, 0xe1, 0x07, 0x1a,
	0xe2, 0x44, 0xa6, 0x2c, 0x72, 0x59, 0xc2, 0xdd, 0x29, 0xd3, 0xb3, 0x63, 0x77, 0xd1, 0x77, 0x63,
	0x50, 0x8a, 0x85, 0x40, 0x93, 0x54, 0x6a, 0x69, 0xb7, 0x4a, 0x88, 0xb2, 0x84, 0x53, 0x03, 0xd1,
	0x45, 0xdf, 0xd9, 0x0d, 0x20, 0x01, 0x11, 0x80, 0x98, 0x71, 0x50, 0x6e, 0x28, 0x43, 0x69, 0x70,
	0x53, 0x15, 0x4a, 0x67, 0x27, 0x94, 0x32, 0x8c, 0xc0, 0x35, 0xdd, 0x74, 0x7e, 0xe4, 0x6a, 0x1e,
	0x83, 0xd2, 0x2c, 0x4e, 0x36, 0xc0, 0xc3, 0xca, 0xf7, 0x67, 0x32, 0x8e, 0xa5, 0xf8, 0xc3, 0x80,
	0xf3, 0xb8, 0x42, 0x81, 0x98, 0xc7, 0x2a, 0x87, 0x8c, 0x93, 0x89, 0x4c, 0x20, 0x65, 0x9a, 0x4b,
	0x51, 0xc0, 0xdd, 0x9f, 0x08, 0xdb, 0xc3, 0x7c, 0xe7, 0x75, 0xb9, 0x71, 0x20, 0x8e, 0xa4, 0xdd,
	0xc2, 0x8d, 0x13, 0x39, 0x9d, 0xf0, 0xa0, 0x8d, 0x3a, 0xa8, 0xd7, 0xf4, 0xeb, 0x27, 0x72, 0x7a,
	0x10, 0xd8, 0xcf, 0x71, 0x5d, 0x69, 0xa6, 0xa1, 0x5d, 0xeb, 0xa0, 0xde, 0x9d, 0xc1, 0x23, 0x5a,
	0xc9, 0x6a, 0x3e, 0x45, 0x17, 0x7d, 0x5a, 0x1d, 0xf8, 0x26, 0x57, 0xf8, 0x85, 0xd0, 0x7e, 0x86,
	0xb1, 0xd2, 0x2c, 0xd5, 0x93, 0x3c, 0x5b, 0xfb, 0x46, 0x07, 0xf5, 0xb6, 0x07, 0x0e, 0x2d, 0x82,
	0xd3, 0x32, 0x38, 0x1d, 0x97, 0xc1, 0x87, 0x5b, 0x67, 0x5f, 0x77, 0x90, 0xdf, 0x34, 0x9a, 0x7c,
	0x35, 0x1f, 0x30, 0x8b, 0xa4, 0x82, 0x62, 0xc0, 0xd6, 0x75, 0x07, 0x18, 0x4d, 0xbe, 0xda, 0x7d,
	0x8f, 0xf0, 0xfd, 0xaa, 0xc1, 0x31, 0xa4, 0x31, 0x17, 0xa6, 0xb4, 0xef, 0xe1, 0x46, 0x0a, 0x4c,
	0x49, 0xb1, 0x09, 0xbe, 0xe9, 0x6c, 0x0f, 0xdf, 0x0c, 0x40, 0x33, 0x1e, 0x29, 0x93, 0x7d, 0x7b,
	0xd0, 0xa9, 0x66, 0x2f, 0x7e, 0x46, 0x1e, 0x7e, 0xc4, 0x4e, 0x23, 0xc9, 0x02, 0xe5, 0x97, 0x02,
	0xdb, 0xc1, 0xb7, 0x78, 0x00, 0x42, 0x73, 0x7d, 0x6a, 0x12, 0x37, 0xfd, 0xdf, 0x7d, 0xf7, 0x33,
	0xc2, 0x77, 0xaf, 0x1c, 0x17, 0x0f, 0x05, 0x8b, 0x72, 0x23, 0xca, 0x54, 0xa5, 0x91, 0xa2, 0xb3,
	0xf7, 0x70, 0x9d, 0x8b, 0x64, 0xae, 0xaf, 0x6d, 0xa3, 0xc0, 0xed, 0x3d, 0xdc, 0x38, 0x06, 0x16,
	0x40, 0xba, 0x39, 0x74, 0xf2, 0x2f, 0xe1, 0x4b, 0x43, 0xf9, 0x1b, 0xba, 0x62, 0x7e, 0xeb, 0x8a,
	0xf9, 0x11, 0x76, 0xaa, 0xde, 0x5f, 0x30, 0x31, 0x83, 0x28, 0xfa, 0xff, 0x51, 0x5e, 0x9e, 0x58,
	0xab, 0x4e, 0x1c, 0x7e, 0x42, 0xcb, 0x15, 0xb1, 0xce, 0x57, 0xc4, 0xba, 0x58, 0x11, 0xf4, 0x2e,
	0x23, 0xe8, 0x43, 0x46, 0xd0, 0x97, 0x8c, 0xa0, 0x65, 0x46, 0xd0, 0xb7, 0x8c, 0xa0, 0xef, 0x19,
	0xb1, 0x2e, 0x32, 0x82, 0xce, 0xd6, 0xc4, 0x5a, 0xae, 0x89, 0x75, 0xbe, 0x26, 0x16, 0x6e, 0x73,
	0x49, 0xff, 0xfa, 0xec, 0x86, 0xb7, 0x5f, 0x15, 0x6f, 0x63, 0x94, 0xdf, 0x8c, 0x11, 0x7a, 0xbb,
	0x1b, 0x5e, 0x22, 0xb9, 0xac, 0x3c, 0xe4, 0xa7, 0xa6, 0xf8, 0x58, 0x6b, 0x8d, 0x4b, 0x60, 0x3f,
	0xe1, 0xc5, 0x65, 0xa6, 0x87, 0xfd, 0x1f, 0xb5, 0x76, 0xb9, 0xee, 0x79, 0xfb, 0x09, 0xf7, 0x3c,
	0xb3, 0xe3, 0x79, 0x87, 0xfd, 0x69, 0xc3, 0x5c, 0xbc, 0x27, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x31, 0xb7, 0x6b, 0x78, 0x21, 0x04, 0x00, 0x00,
}

func (this *BatchOperationInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BatchOperationInfo)
	if !ok {
		that2, ok := that.(BatchOperationInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JobId != that1.JobId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if that1.StartTime == nil {
		if this.StartTime != nil {
			return false
		}
	} else if !this.StartTime.Equal(*that1.StartTime) {
		return false
	}
	if that1.CloseTime == nil {
		if this.CloseTime != nil {
			return false
		}
	} else if !this.CloseTime.Equal(*that1.CloseTime) {
		return false
	}
	return true
}
func (this *BatchOperationTermination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BatchOperationTermination)
	if !ok {
		that2, ok := that.(BatchOperationTermination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *BatchOperationSignal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BatchOperationSignal)
	if !ok {
		that2, ok := that.(BatchOperationSignal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Signal != that1.Signal {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *BatchOperationCancellation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BatchOperationCancellation)
	if !ok {
		that2, ok := that.(BatchOperationCancellation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *BatchOperationInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&batch.BatchOperationInfo{")
	s = append(s, "JobId: "+fmt.Sprintf("%#v", this.JobId)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "CloseTime: "+fmt.Sprintf("%#v", this.CloseTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchOperationTermination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&batch.BatchOperationTermination{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchOperationSignal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&batch.BatchOperationSignal{")
	s = append(s, "Signal: "+fmt.Sprintf("%#v", this.Signal)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchOperationCancellation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&batch.BatchOperationCancellation{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BatchOperationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOperationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchOperationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloseTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CloseTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CloseTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMessage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintMessage(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchOperationTermination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOperationTermination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchOperationTermination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchOperationSignal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOperationSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchOperationSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signal) > 0 {
		i -= len(m.Signal)
		copy(dAtA[i:], m.Signal)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchOperationCancellation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOperationCancellation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchOperationCancellation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BatchOperationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CloseTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CloseTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *BatchOperationTermination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *BatchOperationSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signal)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *BatchOperationCancellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BatchOperationInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchOperationInfo{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CloseTime:` + strings.Replace(fmt.Sprintf("%v", this.CloseTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchOperationTermination) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchOperationTermination{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v11.Payloads", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchOperationSignal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchOperationSignal{`,
		`Signal:` + fmt.Sprintf("%v", this.Signal) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v11.Payloads", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v11.Header", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchOperationCancellation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchOperationCancellation{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BatchOperationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOperationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOperationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1.BatchOperationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CloseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchOperationTermination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOperationTermination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOperationTermination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v11.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchOperationSignal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOperationSignal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOperationSignal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v11.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v11.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchOperationCancellation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOperationCancellation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOperationCancellation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
