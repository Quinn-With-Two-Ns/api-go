// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/taskqueue/v1/message.proto

package taskqueue

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/enums/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// See https://docs.temporal.io/docs/concepts/task-queues/
type TaskQueue struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Default: TASK_QUEUE_KIND_NORMAL.
	Kind v1.TaskQueueKind `protobuf:"varint,2,opt,name=kind,proto3,enum=temporal.api.enums.v1.TaskQueueKind" json:"kind,omitempty"`
}

func (m *TaskQueue) Reset()      { *m = TaskQueue{} }
func (*TaskQueue) ProtoMessage() {}
func (*TaskQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{0}
}
func (m *TaskQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueue.Merge(m, src)
}
func (m *TaskQueue) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueue.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueue proto.InternalMessageInfo

func (m *TaskQueue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskQueue) GetKind() v1.TaskQueueKind {
	if m != nil {
		return m.Kind
	}
	return v1.TASK_QUEUE_KIND_UNSPECIFIED
}

// Only applies to activity task queues
type TaskQueueMetadata struct {
	// Allows throttling dispatch of tasks from this queue
	MaxTasksPerSecond *types.DoubleValue `protobuf:"bytes,1,opt,name=max_tasks_per_second,json=maxTasksPerSecond,proto3" json:"max_tasks_per_second,omitempty"`
}

func (m *TaskQueueMetadata) Reset()      { *m = TaskQueueMetadata{} }
func (*TaskQueueMetadata) ProtoMessage() {}
func (*TaskQueueMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{1}
}
func (m *TaskQueueMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueueMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueueMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueueMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueueMetadata.Merge(m, src)
}
func (m *TaskQueueMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueueMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueueMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueueMetadata proto.InternalMessageInfo

func (m *TaskQueueMetadata) GetMaxTasksPerSecond() *types.DoubleValue {
	if m != nil {
		return m.MaxTasksPerSecond
	}
	return nil
}

type TaskQueueStatus struct {
	BacklogCountHint int64        `protobuf:"varint,1,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	ReadLevel        int64        `protobuf:"varint,2,opt,name=read_level,json=readLevel,proto3" json:"read_level,omitempty"`
	AckLevel         int64        `protobuf:"varint,3,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	RatePerSecond    float64      `protobuf:"fixed64,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TaskIdBlock      *TaskIdBlock `protobuf:"bytes,5,opt,name=task_id_block,json=taskIdBlock,proto3" json:"task_id_block,omitempty"`
}

func (m *TaskQueueStatus) Reset()      { *m = TaskQueueStatus{} }
func (*TaskQueueStatus) ProtoMessage() {}
func (*TaskQueueStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{2}
}
func (m *TaskQueueStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueueStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueueStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueueStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueueStatus.Merge(m, src)
}
func (m *TaskQueueStatus) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueueStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueueStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueueStatus proto.InternalMessageInfo

func (m *TaskQueueStatus) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *TaskQueueStatus) GetReadLevel() int64 {
	if m != nil {
		return m.ReadLevel
	}
	return 0
}

func (m *TaskQueueStatus) GetAckLevel() int64 {
	if m != nil {
		return m.AckLevel
	}
	return 0
}

func (m *TaskQueueStatus) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

func (m *TaskQueueStatus) GetTaskIdBlock() *TaskIdBlock {
	if m != nil {
		return m.TaskIdBlock
	}
	return nil
}

type TaskIdBlock struct {
	StartId int64 `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId   int64 `protobuf:"varint,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
}

func (m *TaskIdBlock) Reset()      { *m = TaskIdBlock{} }
func (*TaskIdBlock) ProtoMessage() {}
func (*TaskIdBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{3}
}
func (m *TaskIdBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskIdBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskIdBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskIdBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskIdBlock.Merge(m, src)
}
func (m *TaskIdBlock) XXX_Size() int {
	return m.Size()
}
func (m *TaskIdBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskIdBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TaskIdBlock proto.InternalMessageInfo

func (m *TaskIdBlock) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *TaskIdBlock) GetEndId() int64 {
	if m != nil {
		return m.EndId
	}
	return 0
}

type TaskQueuePartitionMetadata struct {
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OwnerHostName string `protobuf:"bytes,2,opt,name=owner_host_name,json=ownerHostName,proto3" json:"owner_host_name,omitempty"`
}

func (m *TaskQueuePartitionMetadata) Reset()      { *m = TaskQueuePartitionMetadata{} }
func (*TaskQueuePartitionMetadata) ProtoMessage() {}
func (*TaskQueuePartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{4}
}
func (m *TaskQueuePartitionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueuePartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueuePartitionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueuePartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueuePartitionMetadata.Merge(m, src)
}
func (m *TaskQueuePartitionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueuePartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueuePartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueuePartitionMetadata proto.InternalMessageInfo

func (m *TaskQueuePartitionMetadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TaskQueuePartitionMetadata) GetOwnerHostName() string {
	if m != nil {
		return m.OwnerHostName
	}
	return ""
}

type PollerInfo struct {
	// Unix Nano
	LastAccessTime *time.Time `protobuf:"bytes,1,opt,name=last_access_time,json=lastAccessTime,proto3,stdtime" json:"last_access_time,omitempty"`
	Identity       string     `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RatePerSecond  float64    `protobuf:"fixed64,3,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	// If a worker has specified an ID for use with the worker versioning feature while polling,
	// that id must appear here.
	WorkerVersioningBuildId string `protobuf:"bytes,4,opt,name=worker_versioning_build_id,json=workerVersioningBuildId,proto3" json:"worker_versioning_build_id,omitempty"`
}

func (m *PollerInfo) Reset()      { *m = PollerInfo{} }
func (*PollerInfo) ProtoMessage() {}
func (*PollerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{5}
}
func (m *PollerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollerInfo.Merge(m, src)
}
func (m *PollerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PollerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PollerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PollerInfo proto.InternalMessageInfo

func (m *PollerInfo) GetLastAccessTime() *time.Time {
	if m != nil {
		return m.LastAccessTime
	}
	return nil
}

func (m *PollerInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollerInfo) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

func (m *PollerInfo) GetWorkerVersioningBuildId() string {
	if m != nil {
		return m.WorkerVersioningBuildId
	}
	return ""
}

type StickyExecutionAttributes struct {
	WorkerTaskQueue *TaskQueue `protobuf:"bytes,1,opt,name=worker_task_queue,json=workerTaskQueue,proto3" json:"worker_task_queue,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *time.Duration `protobuf:"bytes,2,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,stdduration" json:"schedule_to_start_timeout,omitempty"`
}

func (m *StickyExecutionAttributes) Reset()      { *m = StickyExecutionAttributes{} }
func (*StickyExecutionAttributes) ProtoMessage() {}
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{6}
}
func (m *StickyExecutionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickyExecutionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickyExecutionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickyExecutionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickyExecutionAttributes.Merge(m, src)
}
func (m *StickyExecutionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StickyExecutionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StickyExecutionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StickyExecutionAttributes proto.InternalMessageInfo

func (m *StickyExecutionAttributes) GetWorkerTaskQueue() *TaskQueue {
	if m != nil {
		return m.WorkerTaskQueue
	}
	return nil
}

func (m *StickyExecutionAttributes) GetScheduleToStartTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

// Used by the worker versioning APIs, represents a node in the version graph for a particular
// task queue
type VersionIdNode struct {
	Version *VersionId `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// A pointer to the previous version this version is considered to be compatible with
	PreviousCompatible *VersionIdNode `protobuf:"bytes,2,opt,name=previous_compatible,json=previousCompatible,proto3" json:"previous_compatible,omitempty"`
	// A pointer to the last incompatible version (previous major version)
	PreviousIncompatible *VersionIdNode `protobuf:"bytes,3,opt,name=previous_incompatible,json=previousIncompatible,proto3" json:"previous_incompatible,omitempty"`
}

func (m *VersionIdNode) Reset()      { *m = VersionIdNode{} }
func (*VersionIdNode) ProtoMessage() {}
func (*VersionIdNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{7}
}
func (m *VersionIdNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionIdNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionIdNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionIdNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionIdNode.Merge(m, src)
}
func (m *VersionIdNode) XXX_Size() int {
	return m.Size()
}
func (m *VersionIdNode) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionIdNode.DiscardUnknown(m)
}

var xxx_messageInfo_VersionIdNode proto.InternalMessageInfo

func (m *VersionIdNode) GetVersion() *VersionId {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *VersionIdNode) GetPreviousCompatible() *VersionIdNode {
	if m != nil {
		return m.PreviousCompatible
	}
	return nil
}

func (m *VersionIdNode) GetPreviousIncompatible() *VersionIdNode {
	if m != nil {
		return m.PreviousIncompatible
	}
	return nil
}

// Used by the worker versioning APIs, represents a specific version of something
// Currently, that's just a whole-worker id. In the future, if we support
// WASM workflow bundle based versioning, for example, then the inside of this
// message may become a oneof of different version types.
type VersionId struct {
	// An opaque whole-worker identifier
	WorkerBuildId string `protobuf:"bytes,1,opt,name=worker_build_id,json=workerBuildId,proto3" json:"worker_build_id,omitempty"`
}

func (m *VersionId) Reset()      { *m = VersionId{} }
func (*VersionId) ProtoMessage() {}
func (*VersionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c60437e4ccf51d94, []int{8}
}
func (m *VersionId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionId.Merge(m, src)
}
func (m *VersionId) XXX_Size() int {
	return m.Size()
}
func (m *VersionId) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionId.DiscardUnknown(m)
}

var xxx_messageInfo_VersionId proto.InternalMessageInfo

func (m *VersionId) GetWorkerBuildId() string {
	if m != nil {
		return m.WorkerBuildId
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskQueue)(nil), "temporal.api.taskqueue.v1.TaskQueue")
	proto.RegisterType((*TaskQueueMetadata)(nil), "temporal.api.taskqueue.v1.TaskQueueMetadata")
	proto.RegisterType((*TaskQueueStatus)(nil), "temporal.api.taskqueue.v1.TaskQueueStatus")
	proto.RegisterType((*TaskIdBlock)(nil), "temporal.api.taskqueue.v1.TaskIdBlock")
	proto.RegisterType((*TaskQueuePartitionMetadata)(nil), "temporal.api.taskqueue.v1.TaskQueuePartitionMetadata")
	proto.RegisterType((*PollerInfo)(nil), "temporal.api.taskqueue.v1.PollerInfo")
	proto.RegisterType((*StickyExecutionAttributes)(nil), "temporal.api.taskqueue.v1.StickyExecutionAttributes")
	proto.RegisterType((*VersionIdNode)(nil), "temporal.api.taskqueue.v1.VersionIdNode")
	proto.RegisterType((*VersionId)(nil), "temporal.api.taskqueue.v1.VersionId")
}

func init() {
	proto.RegisterFile("temporal/api/taskqueue/v1/message.proto", fileDescriptor_c60437e4ccf51d94)
}

var fileDescriptor_c60437e4ccf51d94 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0xee, 0x0f, 0x4f, 0x70, 0x93, 0x0c, 0x2d, 0xc4, 0x26, 0x6c, 0x83, 0x55, 0x85,
	0x20, 0xa1, 0xb5, 0x9c, 0x5e, 0x90, 0x2b, 0x81, 0xe2, 0x82, 0x54, 0x17, 0x52, 0x99, 0x8d, 0x65,
	0xa9, 0x95, 0xd0, 0x6a, 0xbc, 0xf3, 0xea, 0x8c, 0x76, 0x77, 0x66, 0xd9, 0x99, 0x75, 0x92, 0x1b,
	0x57, 0x6e, 0x3d, 0xf2, 0x27, 0x20, 0xfe, 0x92, 0x72, 0xcb, 0xb1, 0x9c, 0x20, 0xce, 0x05, 0x71,
	0xa1, 0x7f, 0x02, 0x9a, 0xd9, 0x1f, 0x71, 0x49, 0x2b, 0xca, 0x6d, 0xe7, 0x7d, 0xdf, 0xfb, 0xe6,
	0x7d, 0xef, 0xbd, 0xb1, 0xd1, 0xc7, 0x0a, 0xa2, 0x58, 0x24, 0x24, 0xec, 0x92, 0x98, 0x75, 0x15,
	0x91, 0xc1, 0xf7, 0x29, 0xa4, 0xd0, 0x9d, 0xf7, 0xba, 0x11, 0x48, 0x49, 0x66, 0xe0, 0xc4, 0x89,
	0x50, 0x02, 0xb7, 0x0a, 0xa2, 0x43, 0x62, 0xe6, 0x94, 0x44, 0x67, 0xde, 0x6b, 0xdb, 0x33, 0x21,
	0x66, 0x21, 0x74, 0x0d, 0x71, 0x9a, 0x3e, 0xed, 0xd2, 0x34, 0x21, 0x8a, 0x09, 0x9e, 0xa5, 0xb6,
	0x6f, 0xff, 0x1b, 0x57, 0x2c, 0x02, 0xa9, 0x48, 0x14, 0xe7, 0x84, 0x4b, 0x02, 0x47, 0x09, 0x89,
	0x63, 0x48, 0x64, 0x8e, 0x7f, 0x44, 0x21, 0x06, 0x4e, 0x81, 0xfb, 0x0c, 0x64, 0x77, 0x26, 0x66,
	0xc2, 0xc4, 0xcd, 0x57, 0x4e, 0xd9, 0x7e, 0xc5, 0x07, 0xf0, 0x34, 0x92, 0xda, 0x83, 0xae, 0xd3,
	0xcb, 0x0a, 0x35, 0xbc, 0xce, 0x63, 0xd4, 0x18, 0x13, 0x19, 0x7c, 0xab, 0x43, 0x18, 0xa3, 0x3a,
	0x27, 0x11, 0x6c, 0x58, 0x5b, 0xd6, 0x4e, 0xc3, 0x35, 0xdf, 0xf8, 0x33, 0x54, 0x0f, 0x18, 0xa7,
	0x1b, 0xd5, 0x2d, 0x6b, 0xe7, 0xc6, 0xee, 0x1d, 0xe7, 0x15, 0xdb, 0x46, 0xd7, 0x99, 0xf7, 0x9c,
	0x52, 0xe3, 0x6b, 0xc6, 0xa9, 0x6b, 0x32, 0x3a, 0x53, 0xb4, 0x5e, 0x86, 0xf7, 0x41, 0x11, 0x4a,
	0x14, 0xc1, 0xfb, 0xe8, 0x66, 0x44, 0x8e, 0x3d, 0x5d, 0x87, 0xf4, 0x62, 0x48, 0x3c, 0x09, 0xbe,
	0xe0, 0xd4, 0x5c, 0xb9, 0xb2, 0xbb, 0xe9, 0x64, 0xce, 0x9d, 0xc2, 0xb9, 0xf3, 0xa5, 0x48, 0xa7,
	0x21, 0x4c, 0x48, 0x98, 0x82, 0xbb, 0x1e, 0x91, 0x63, 0xad, 0x28, 0x47, 0x90, 0x1c, 0x98, 0xb4,
	0xce, 0xdf, 0x16, 0x5a, 0x2d, 0x2f, 0x39, 0x50, 0x44, 0xa5, 0x12, 0x7f, 0x8a, 0xf0, 0x94, 0xf8,
	0x41, 0x28, 0x66, 0x9e, 0x2f, 0x52, 0xae, 0xbc, 0x43, 0xc6, 0x95, 0xb9, 0xa0, 0xe6, 0xae, 0xe5,
	0xc8, 0x7d, 0x0d, 0x3c, 0x60, 0x5c, 0xe1, 0x0f, 0x11, 0x4a, 0x80, 0x50, 0x2f, 0x84, 0x39, 0x84,
	0xc6, 0x65, 0xcd, 0x6d, 0xe8, 0xc8, 0x37, 0x3a, 0x80, 0x3f, 0x40, 0x0d, 0xe2, 0x07, 0x39, 0x5a,
	0x33, 0xe8, 0x75, 0xe2, 0x07, 0x19, 0xb8, 0x8d, 0x56, 0x13, 0xa2, 0x60, 0xd9, 0x47, 0x7d, 0xcb,
	0xda, 0xb1, 0xdc, 0xa6, 0x0e, 0x97, 0x55, 0xe2, 0x87, 0xa8, 0x69, 0x1a, 0xcf, 0xa8, 0x37, 0x0d,
	0x85, 0x1f, 0x6c, 0x5c, 0x31, 0x6e, 0xb7, 0x9d, 0x37, 0xee, 0x90, 0x69, 0xe8, 0x90, 0x0e, 0x34,
	0xdb, 0x5d, 0x51, 0x17, 0x87, 0xce, 0x17, 0x68, 0x65, 0x09, 0xc3, 0x2d, 0x74, 0x5d, 0x2a, 0x92,
	0x28, 0x8f, 0xd1, 0xdc, 0xe2, 0x35, 0x73, 0x1e, 0x52, 0x7c, 0x0b, 0x5d, 0x05, 0x4e, 0x35, 0x90,
	0xb9, 0xba, 0x02, 0x9c, 0x0e, 0x69, 0x67, 0x82, 0xda, 0x65, 0xc7, 0x46, 0x24, 0x51, 0x4c, 0x6f,
	0x66, 0x39, 0x9f, 0x35, 0x54, 0x0b, 0xe0, 0x24, 0xdf, 0x00, 0xfd, 0xa9, 0x4d, 0x8a, 0x23, 0x0e,
	0x89, 0x77, 0x28, 0xa4, 0xf2, 0xcc, 0x7e, 0x54, 0x0d, 0xda, 0x34, 0xe1, 0x07, 0x42, 0xaa, 0x47,
	0x24, 0x82, 0xce, 0x6f, 0x16, 0x42, 0x23, 0x11, 0x86, 0x90, 0x0c, 0xf9, 0x53, 0x81, 0x1f, 0xa2,
	0xb5, 0x90, 0x48, 0xe5, 0x11, 0xdf, 0x07, 0x29, 0x3d, 0xbd, 0xe2, 0xf9, 0x90, 0xdb, 0x97, 0x86,
	0x3c, 0x2e, 0xf6, 0x7f, 0x50, 0x7f, 0xf6, 0xfb, 0x6d, 0xcb, 0xbd, 0xa1, 0x33, 0xf7, 0x4c, 0xa2,
	0x86, 0x70, 0x1b, 0x5d, 0x67, 0x14, 0xb8, 0x62, 0xea, 0x24, 0xbf, 0xbb, 0x3c, 0xbf, 0x6e, 0x06,
	0xb5, 0xd7, 0xcd, 0xe0, 0x1e, 0x6a, 0x1f, 0x89, 0x24, 0x80, 0xc4, 0x9b, 0x43, 0x22, 0x99, 0xe0,
	0x8c, 0xcf, 0xbc, 0x69, 0xca, 0x42, 0xd3, 0xa1, 0xba, 0x51, 0x7d, 0x3f, 0x63, 0x4c, 0x4a, 0xc2,
	0x40, 0xe3, 0x43, 0xda, 0xf9, 0xd5, 0x42, 0xad, 0x03, 0xc5, 0xfc, 0xe0, 0xe4, 0xab, 0x63, 0xf0,
	0x53, 0xdd, 0xb1, 0x3d, 0xa5, 0x12, 0x36, 0x4d, 0x15, 0x48, 0x3c, 0x42, 0xeb, 0xb9, 0xf4, 0xc5,
	0xf3, 0xca, 0xbd, 0xde, 0xf9, 0x8f, 0x11, 0x9b, 0x29, 0xb8, 0xab, 0x59, 0xfa, 0xc5, 0x43, 0x7c,
	0x82, 0x5a, 0xd2, 0x3f, 0x04, 0x9a, 0x86, 0xe0, 0x29, 0xe1, 0x65, 0x13, 0xd6, 0x2d, 0x14, 0xa9,
	0x32, 0x1d, 0x58, 0xd9, 0x6d, 0x5d, 0x7e, 0x2a, 0xf9, 0xaf, 0xcc, 0xa0, 0xfe, 0x93, 0x6e, 0xe2,
	0x7b, 0x85, 0xc2, 0x58, 0x1c, 0xe8, 0xfc, 0x71, 0x96, 0xde, 0xf9, 0xb1, 0x8a, 0x9a, 0xb9, 0xc3,
	0x21, 0x7d, 0x24, 0x28, 0xe0, 0xcf, 0xd1, 0xb5, 0xbc, 0x27, 0x6f, 0x51, 0x75, 0x99, 0xea, 0x16,
	0x49, 0xf8, 0x31, 0x7a, 0x37, 0x4e, 0x60, 0xce, 0x44, 0x2a, 0x3d, 0x5f, 0x44, 0x31, 0x51, 0x6c,
	0x1a, 0x42, 0x5e, 0xe7, 0xce, 0xdb, 0x68, 0xe9, 0x32, 0x5c, 0x5c, 0x88, 0xdc, 0x2f, 0x35, 0xf0,
	0x77, 0xe8, 0x56, 0x29, 0xcd, 0xf8, 0x92, 0x78, 0xed, 0x7f, 0x8a, 0xdf, 0x2c, 0x64, 0x86, 0x4b,
	0x2a, 0x9d, 0xbb, 0xa8, 0x51, 0xd2, 0xf4, 0x26, 0xe5, 0x63, 0x2c, 0xd7, 0x22, 0x7b, 0x06, 0xcd,
	0x2c, 0x9c, 0x2f, 0xc3, 0xe0, 0xb9, 0x75, 0x7a, 0x66, 0x57, 0x5e, 0x9c, 0xd9, 0x95, 0x97, 0x67,
	0xb6, 0xf5, 0xc3, 0xc2, 0xb6, 0x7e, 0x5e, 0xd8, 0xd6, 0xf3, 0x85, 0x6d, 0x9d, 0x2e, 0x6c, 0xeb,
	0x8f, 0x85, 0x6d, 0xfd, 0xb9, 0xb0, 0x2b, 0x2f, 0x17, 0xb6, 0xf5, 0xec, 0xdc, 0xae, 0x9c, 0x9e,
	0xdb, 0x95, 0x17, 0xe7, 0x76, 0x05, 0x6d, 0x32, 0xf1, 0xe6, 0x6a, 0x07, 0xef, 0xec, 0x67, 0xff,
	0x2e, 0x23, 0x3d, 0xcd, 0x91, 0xf5, 0xe4, 0x93, 0xd9, 0x12, 0x9b, 0x89, 0x4b, 0xff, 0x46, 0xf7,
	0xca, 0xc3, 0x2f, 0xd5, 0xd6, 0xb8, 0x20, 0xee, 0xc5, 0xec, 0x62, 0xad, 0x9c, 0x49, 0xef, 0xaf,
	0xea, 0x66, 0x81, 0xf5, 0xfb, 0x7b, 0x31, 0xeb, 0xf7, 0x4b, 0xb4, 0xdf, 0x9f, 0xf4, 0xa6, 0x57,
	0xcd, 0xf2, 0xdc, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xca, 0xf2, 0xf8, 0x43, 0xf6, 0x06, 0x00,
	0x00,
}

func (this *TaskQueue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueue)
	if !ok {
		that2, ok := that.(TaskQueue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *TaskQueueMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueueMetadata)
	if !ok {
		that2, ok := that.(TaskQueueMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxTasksPerSecond.Equal(that1.MaxTasksPerSecond) {
		return false
	}
	return true
}
func (this *TaskQueueStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueueStatus)
	if !ok {
		that2, ok := that.(TaskQueueStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BacklogCountHint != that1.BacklogCountHint {
		return false
	}
	if this.ReadLevel != that1.ReadLevel {
		return false
	}
	if this.AckLevel != that1.AckLevel {
		return false
	}
	if this.RatePerSecond != that1.RatePerSecond {
		return false
	}
	if !this.TaskIdBlock.Equal(that1.TaskIdBlock) {
		return false
	}
	return true
}
func (this *TaskIdBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskIdBlock)
	if !ok {
		that2, ok := that.(TaskIdBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartId != that1.StartId {
		return false
	}
	if this.EndId != that1.EndId {
		return false
	}
	return true
}
func (this *TaskQueuePartitionMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueuePartitionMetadata)
	if !ok {
		that2, ok := that.(TaskQueuePartitionMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.OwnerHostName != that1.OwnerHostName {
		return false
	}
	return true
}
func (this *PollerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollerInfo)
	if !ok {
		that2, ok := that.(PollerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LastAccessTime == nil {
		if this.LastAccessTime != nil {
			return false
		}
	} else if !this.LastAccessTime.Equal(*that1.LastAccessTime) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RatePerSecond != that1.RatePerSecond {
		return false
	}
	if this.WorkerVersioningBuildId != that1.WorkerVersioningBuildId {
		return false
	}
	return true
}
func (this *StickyExecutionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StickyExecutionAttributes)
	if !ok {
		that2, ok := that.(StickyExecutionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerTaskQueue.Equal(that1.WorkerTaskQueue) {
		return false
	}
	if this.ScheduleToStartTimeout != nil && that1.ScheduleToStartTimeout != nil {
		if *this.ScheduleToStartTimeout != *that1.ScheduleToStartTimeout {
			return false
		}
	} else if this.ScheduleToStartTimeout != nil {
		return false
	} else if that1.ScheduleToStartTimeout != nil {
		return false
	}
	return true
}
func (this *VersionIdNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionIdNode)
	if !ok {
		that2, ok := that.(VersionIdNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.PreviousCompatible.Equal(that1.PreviousCompatible) {
		return false
	}
	if !this.PreviousIncompatible.Equal(that1.PreviousIncompatible) {
		return false
	}
	return true
}
func (this *VersionId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionId)
	if !ok {
		that2, ok := that.(VersionId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkerBuildId != that1.WorkerBuildId {
		return false
	}
	return true
}
func (this *TaskQueue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&taskqueue.TaskQueue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskQueueMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&taskqueue.TaskQueueMetadata{")
	if this.MaxTasksPerSecond != nil {
		s = append(s, "MaxTasksPerSecond: "+fmt.Sprintf("%#v", this.MaxTasksPerSecond)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskQueueStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&taskqueue.TaskQueueStatus{")
	s = append(s, "BacklogCountHint: "+fmt.Sprintf("%#v", this.BacklogCountHint)+",\n")
	s = append(s, "ReadLevel: "+fmt.Sprintf("%#v", this.ReadLevel)+",\n")
	s = append(s, "AckLevel: "+fmt.Sprintf("%#v", this.AckLevel)+",\n")
	s = append(s, "RatePerSecond: "+fmt.Sprintf("%#v", this.RatePerSecond)+",\n")
	if this.TaskIdBlock != nil {
		s = append(s, "TaskIdBlock: "+fmt.Sprintf("%#v", this.TaskIdBlock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskIdBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&taskqueue.TaskIdBlock{")
	s = append(s, "StartId: "+fmt.Sprintf("%#v", this.StartId)+",\n")
	s = append(s, "EndId: "+fmt.Sprintf("%#v", this.EndId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskQueuePartitionMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&taskqueue.TaskQueuePartitionMetadata{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "OwnerHostName: "+fmt.Sprintf("%#v", this.OwnerHostName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&taskqueue.PollerInfo{")
	s = append(s, "LastAccessTime: "+fmt.Sprintf("%#v", this.LastAccessTime)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RatePerSecond: "+fmt.Sprintf("%#v", this.RatePerSecond)+",\n")
	s = append(s, "WorkerVersioningBuildId: "+fmt.Sprintf("%#v", this.WorkerVersioningBuildId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickyExecutionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&taskqueue.StickyExecutionAttributes{")
	if this.WorkerTaskQueue != nil {
		s = append(s, "WorkerTaskQueue: "+fmt.Sprintf("%#v", this.WorkerTaskQueue)+",\n")
	}
	s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionIdNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&taskqueue.VersionIdNode{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.PreviousCompatible != nil {
		s = append(s, "PreviousCompatible: "+fmt.Sprintf("%#v", this.PreviousCompatible)+",\n")
	}
	if this.PreviousIncompatible != nil {
		s = append(s, "PreviousIncompatible: "+fmt.Sprintf("%#v", this.PreviousIncompatible)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&taskqueue.VersionId{")
	s = append(s, "WorkerBuildId: "+fmt.Sprintf("%#v", this.WorkerBuildId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TaskQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskQueueMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueueMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueueMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTasksPerSecond != nil {
		{
			size, err := m.MaxTasksPerSecond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskQueueStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueueStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueueStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskIdBlock != nil {
		{
			size, err := m.TaskIdBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x21
	}
	if m.AckLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AckLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.ReadLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReadLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskIdBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskIdBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskIdBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EndId))
		i--
		dAtA[i] = 0x10
	}
	if m.StartId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskQueuePartitionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueuePartitionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueuePartitionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerHostName) > 0 {
		i -= len(m.OwnerHostName)
		copy(dAtA[i:], m.OwnerHostName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OwnerHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerVersioningBuildId) > 0 {
		i -= len(m.WorkerVersioningBuildId)
		copy(dAtA[i:], m.WorkerVersioningBuildId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkerVersioningBuildId)))
		i--
		dAtA[i] = 0x22
	}
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.LastAccessTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastAccessTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastAccessTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintMessage(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StickyExecutionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickyExecutionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickyExecutionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleToStartTimeout != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintMessage(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkerTaskQueue != nil {
		{
			size, err := m.WorkerTaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionIdNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionIdNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionIdNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousIncompatible != nil {
		{
			size, err := m.PreviousIncompatible.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PreviousCompatible != nil {
		{
			size, err := m.PreviousCompatible.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerBuildId) > 0 {
		i -= len(m.WorkerBuildId)
		copy(dAtA[i:], m.WorkerBuildId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkerBuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovMessage(uint64(m.Kind))
	}
	return n
}

func (m *TaskQueueMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTasksPerSecond != nil {
		l = m.MaxTasksPerSecond.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TaskQueueStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BacklogCountHint != 0 {
		n += 1 + sovMessage(uint64(m.BacklogCountHint))
	}
	if m.ReadLevel != 0 {
		n += 1 + sovMessage(uint64(m.ReadLevel))
	}
	if m.AckLevel != 0 {
		n += 1 + sovMessage(uint64(m.AckLevel))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	if m.TaskIdBlock != nil {
		l = m.TaskIdBlock.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TaskIdBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovMessage(uint64(m.StartId))
	}
	if m.EndId != 0 {
		n += 1 + sovMessage(uint64(m.EndId))
	}
	return n
}

func (m *TaskQueuePartitionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OwnerHostName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *PollerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastAccessTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastAccessTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	l = len(m.WorkerVersioningBuildId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StickyExecutionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerTaskQueue != nil {
		l = m.WorkerTaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *VersionIdNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PreviousCompatible != nil {
		l = m.PreviousCompatible.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PreviousIncompatible != nil {
		l = m.PreviousIncompatible.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *VersionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerBuildId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskQueue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskQueueMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueueMetadata{`,
		`MaxTasksPerSecond:` + strings.Replace(fmt.Sprintf("%v", this.MaxTasksPerSecond), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskQueueStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueueStatus{`,
		`BacklogCountHint:` + fmt.Sprintf("%v", this.BacklogCountHint) + `,`,
		`ReadLevel:` + fmt.Sprintf("%v", this.ReadLevel) + `,`,
		`AckLevel:` + fmt.Sprintf("%v", this.AckLevel) + `,`,
		`RatePerSecond:` + fmt.Sprintf("%v", this.RatePerSecond) + `,`,
		`TaskIdBlock:` + strings.Replace(this.TaskIdBlock.String(), "TaskIdBlock", "TaskIdBlock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskIdBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskIdBlock{`,
		`StartId:` + fmt.Sprintf("%v", this.StartId) + `,`,
		`EndId:` + fmt.Sprintf("%v", this.EndId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskQueuePartitionMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueuePartitionMetadata{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`OwnerHostName:` + fmt.Sprintf("%v", this.OwnerHostName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollerInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollerInfo{`,
		`LastAccessTime:` + strings.Replace(fmt.Sprintf("%v", this.LastAccessTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RatePerSecond:` + fmt.Sprintf("%v", this.RatePerSecond) + `,`,
		`WorkerVersioningBuildId:` + fmt.Sprintf("%v", this.WorkerVersioningBuildId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StickyExecutionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StickyExecutionAttributes{`,
		`WorkerTaskQueue:` + strings.Replace(this.WorkerTaskQueue.String(), "TaskQueue", "TaskQueue", 1) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionIdNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionIdNode{`,
		`Version:` + strings.Replace(this.Version.String(), "VersionId", "VersionId", 1) + `,`,
		`PreviousCompatible:` + strings.Replace(this.PreviousCompatible.String(), "VersionIdNode", "VersionIdNode", 1) + `,`,
		`PreviousIncompatible:` + strings.Replace(this.PreviousIncompatible.String(), "VersionIdNode", "VersionIdNode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionId{`,
		`WorkerBuildId:` + fmt.Sprintf("%v", this.WorkerBuildId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= v1.TaskQueueKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskQueueMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueueMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueueMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTasksPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTasksPerSecond == nil {
				m.MaxTasksPerSecond = &types.DoubleValue{}
			}
			if err := m.MaxTasksPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskQueueStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueueStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueueStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadLevel", wireType)
			}
			m.ReadLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckLevel", wireType)
			}
			m.AckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIdBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskIdBlock == nil {
				m.TaskIdBlock = &TaskIdBlock{}
			}
			if err := m.TaskIdBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskIdBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskIdBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskIdBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndId", wireType)
			}
			m.EndId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskQueuePartitionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueuePartitionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueuePartitionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAccessTime == nil {
				m.LastAccessTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastAccessTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerVersioningBuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerVersioningBuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickyExecutionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickyExecutionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickyExecutionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerTaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerTaskQueue == nil {
				m.WorkerTaskQueue = &TaskQueue{}
			}
			if err := m.WorkerTaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionIdNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionIdNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionIdNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &VersionId{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousCompatible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousCompatible == nil {
				m.PreviousCompatible = &VersionIdNode{}
			}
			if err := m.PreviousCompatible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousIncompatible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousIncompatible == nil {
				m.PreviousIncompatible = &VersionIdNode{}
			}
			if err := m.PreviousIncompatible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerBuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerBuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
